{"version":3,"file":"js/33.js","sources":["webpack:///./node_modules/@liquality/wallet-core/dist/src/swaps/utils.js","webpack:///./node_modules/@liquality/wallet-core/dist/src/utils/history.js","webpack:///./node_modules/@liquality/wallet-core/dist/src/utils/moment.js","webpack:///./node_modules/@liquality/wallet-core/dist/src/utils/quotes.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLiqualityLiquidityForAsset = exports.getSwapProviderInfo = exports.getSwapProviderConfig = void 0;\nconst tslib_1 = require(\"tslib\");\nconst build_config_1 = tslib_1.__importDefault(require(\"../build.config\"));\nconst factory_1 = require(\"../factory\");\nconst types_1 = require(\"../store/types\");\nconst info_json_1 = tslib_1.__importDefault(require(\"../swaps/astroport/info.json\"));\nconst info_json_2 = tslib_1.__importDefault(require(\"../swaps/fastbtc/info.json\"));\nconst info_json_3 = tslib_1.__importDefault(require(\"../swaps/hop/info.json\"));\nconst info_json_4 = tslib_1.__importDefault(require(\"../swaps/lifi/info.json\"));\nconst info_json_5 = tslib_1.__importDefault(require(\"../swaps/jupiter/info.json\"));\nconst info_json_6 = tslib_1.__importDefault(require(\"../swaps/liquality/info.json\"));\nconst info_json_7 = tslib_1.__importDefault(require(\"../swaps/liqualityboost/liqualityBoostERC20toNative/info.json\"));\nconst info_json_8 = tslib_1.__importDefault(require(\"../swaps/liqualityboost/liqualityBoostNativeToERC20/info.json\"));\nconst info_json_9 = tslib_1.__importDefault(require(\"../swaps/oneinch/info.json\"));\nconst info_json_10 = tslib_1.__importDefault(require(\"../swaps/sovryn/info.json\"));\nconst info_json_11 = tslib_1.__importDefault(require(\"../swaps/thorchain/info.json\"));\nconst info_json_12 = tslib_1.__importDefault(require(\"../swaps/uniswap/info.json\"));\nconst info_json_13 = tslib_1.__importDefault(require(\"../swaps/debridge/info.json\"));\nconst error_parser_1 = require(\"@liquality/error-parser\");\nconst swapProviderInfo = {\n    [types_1.SwapProviderType.Liquality]: info_json_6.default,\n    [types_1.SwapProviderType.UniswapV2]: info_json_12.default,\n    [types_1.SwapProviderType.OneInch]: info_json_9.default,\n    [types_1.SwapProviderType.Thorchain]: info_json_11.default,\n    [types_1.SwapProviderType.FastBTCDeposit]: info_json_2.default,\n    [types_1.SwapProviderType.FastBTCWithdraw]: info_json_2.default,\n    [types_1.SwapProviderType.LiqualityBoostNativeToERC20]: info_json_8.default,\n    [types_1.SwapProviderType.LiqualityBoostERC20ToNative]: info_json_7.default,\n    [types_1.SwapProviderType.Sovryn]: info_json_10.default,\n    [types_1.SwapProviderType.Astroport]: info_json_1.default,\n    [types_1.SwapProviderType.Hop]: info_json_3.default,\n    [types_1.SwapProviderType.Jupiter]: info_json_5.default,\n    [types_1.SwapProviderType.DeBridge]: info_json_13.default,\n    [types_1.SwapProviderType.LiFi]: info_json_4.default,\n};\nfunction getSwapProviderConfig(network, providerId) {\n    return build_config_1.default.swapProviders[network][providerId];\n}\nexports.getSwapProviderConfig = getSwapProviderConfig;\nfunction getSwapProviderInfo(network, providerId) {\n    const config = getSwapProviderConfig(network, providerId);\n    if (!config) {\n        throw (0, error_parser_1.createInternalError)(error_parser_1.CUSTOM_ERRORS.NotFound.SwapProvider.Config(providerId, network));\n    }\n    return swapProviderInfo[config.type];\n}\nexports.getSwapProviderInfo = getSwapProviderInfo;\nconst getLiqualityLiquidityForAsset = ({ asset, network, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n    const swapProvider = (0, factory_1.getSwapProvider)(network, types_1.SwapProviderType.Liquality);\n    return swapProvider.getAssetLiquidity(asset);\n});\nexports.getLiqualityLiquidityForAsset = getLiqualityLiquidityForAsset;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.applyActivityFilters = exports.SEND_STATUS_FILTER_MAP = exports.ACTIVITY_STATUSES = exports.ACTIVITY_FILTER_TYPES = exports.getStep = exports.getStatusLabel = exports.SEND_STATUS_LABEL_MAP = exports.SEND_STATUS_STEP_MAP = void 0;\nconst tslib_1 = require(\"tslib\");\nconst moment_1 = tslib_1.__importDefault(require(\"moment\"));\nconst error_parser_1 = require(\"@liquality/error-parser\");\nconst swap_1 = require(\"../factory/swap\");\nconst types_1 = require(\"../store/types\");\nexports.SEND_STATUS_STEP_MAP = {\n    [types_1.SendStatus.WAITING_FOR_CONFIRMATIONS]: 0,\n    [types_1.SendStatus.SUCCESS]: 1,\n    [types_1.SendStatus.FAILED]: 2,\n};\nexports.SEND_STATUS_LABEL_MAP = {\n    [types_1.SendStatus.WAITING_FOR_CONFIRMATIONS]: 'Pending',\n    [types_1.SendStatus.SUCCESS]: 'Completed',\n    [types_1.SendStatus.FAILED]: 'Failed',\n};\nfunction getStatusLabel(item) {\n    if (item.type === types_1.TransactionType.NFT) {\n        return exports.SEND_STATUS_LABEL_MAP[item.status] || '';\n    }\n    if (item.type === types_1.TransactionType.Send) {\n        return exports.SEND_STATUS_LABEL_MAP[item.status] || '';\n    }\n    if (item.type === types_1.TransactionType.Swap) {\n        const swapProvider = (0, swap_1.getSwapProvider)(item.network, item.provider);\n        return (swapProvider.statuses[item.status].label\n            .replace('{from}', item.from)\n            .replace('{to}', item.to)\n            .replace('{bridgeAsset}', item.bridgeAsset || '') || '');\n    }\n}\nexports.getStatusLabel = getStatusLabel;\nfunction getStep(item) {\n    const itemType = item.type;\n    if (itemType === types_1.TransactionType.NFT) {\n        return exports.SEND_STATUS_STEP_MAP[item.status];\n    }\n    if (itemType === types_1.TransactionType.Send) {\n        return exports.SEND_STATUS_STEP_MAP[item.status];\n    }\n    if (itemType === types_1.TransactionType.Swap) {\n        const swapProvider = (0, swap_1.getSwapProvider)(item.network, item.provider);\n        return swapProvider.statuses[item.status].step;\n    }\n    throw (0, error_parser_1.createInternalError)(error_parser_1.CUSTOM_ERRORS.Invalid.TransactionType(itemType));\n}\nexports.getStep = getStep;\nexports.ACTIVITY_FILTER_TYPES = {\n    SWAP: {\n        label: 'Swap',\n        icon: 'swap',\n    },\n    NFT: {\n        label: 'NFT',\n        icon: 'nft',\n    },\n    SEND: {\n        label: 'Send',\n        icon: 'send',\n    },\n    RECEIVE: {\n        label: 'Receive',\n        icon: 'receive',\n    },\n};\nexports.ACTIVITY_STATUSES = {\n    PENDING: {\n        label: 'Pending',\n        icon: 'pending',\n    },\n    COMPLETED: {\n        label: 'Completed',\n        icon: 'completed',\n    },\n    FAILED: {\n        label: 'Failed',\n        icon: 'failed',\n    },\n    NEEDS_ATTENTION: {\n        label: 'Needs Attention',\n        icon: 'needs_attention',\n    },\n    REFUNDED: {\n        label: 'Refunded',\n        icon: 'refunded',\n    },\n};\nexports.SEND_STATUS_FILTER_MAP = {\n    WAITING_FOR_CONFIRMATIONS: 'PENDING',\n    SUCCESS: 'COMPLETED',\n    FAILED: 'FAILED',\n};\nconst applyActivityFilters = (activity, filters) => {\n    const { types, statuses, dates } = filters;\n    let filteredByType = [...activity];\n    if (types.length > 0) {\n        filteredByType = [...filteredByType].filter((i) => types.includes(i.type));\n    }\n    let fiteredByStatus = [...filteredByType];\n    if (statuses.length > 0) {\n        fiteredByStatus = [...fiteredByStatus].filter((i) => {\n            if (i.type === 'SWAP') {\n                const swapProvider = (0, swap_1.getSwapProvider)(i.network, i.provider);\n                return statuses.includes(swapProvider.statuses[i.status].filterStatus);\n            }\n            if (i.type === 'SEND') {\n                return statuses.includes(exports.SEND_STATUS_FILTER_MAP[i.status]);\n            }\n            return true;\n        });\n    }\n    let filteredByStartDate = [...fiteredByStatus];\n    if (dates.start) {\n        const startDateFilter = (0, moment_1.default)(dates.start);\n        filteredByStartDate = [...filteredByStartDate].filter((i) => {\n            const start = (0, moment_1.default)(i.startTime);\n            const diffInDays = start.diff(startDateFilter, 'days');\n            return diffInDays >= 0;\n        });\n    }\n    let filteredByEndDate = [...filteredByStartDate];\n    if (dates.end) {\n        const endDateFilter = (0, moment_1.default)(dates.end);\n        filteredByEndDate = [...filteredByEndDate].filter((i) => {\n            const end = (0, moment_1.default)(i.startTime);\n            const diffInDays = end.diff(endDateFilter, 'days');\n            return diffInDays <= 0;\n        });\n    }\n    return filteredByEndDate;\n};\nexports.applyActivityFilters = applyActivityFilters;\n//# sourceMappingURL=history.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst moment_1 = tslib_1.__importDefault(require(\"moment\"));\nconst locale = window.navigator.userLanguage || window.navigator.language;\nmoment_1.default.locale(locale);\nexports.default = moment_1.default;\n//# sourceMappingURL=moment.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sortQuotes = exports.calculateQuoteRate = void 0;\nconst tslib_1 = require(\"tslib\");\nconst cryptoassets_1 = require(\"@liquality/cryptoassets\");\nconst bignumber_js_1 = tslib_1.__importStar(require(\"bignumber.js\"));\nconst cryptoassets_2 = tslib_1.__importDefault(require(\"./cryptoassets\"));\nfunction calculateQuoteRate(quote) {\n    const fromAmount = (0, cryptoassets_1.unitToCurrency)(cryptoassets_2.default[quote.from], new bignumber_js_1.BigNumber(quote.fromAmount));\n    const toAmount = (0, cryptoassets_1.unitToCurrency)(cryptoassets_2.default[quote.to], new bignumber_js_1.BigNumber(quote.toAmount));\n    return toAmount.div(fromAmount);\n}\nexports.calculateQuoteRate = calculateQuoteRate;\nfunction sortQuotes(quotes, _network) {\n    return quotes.slice(0).sort((a, b) => {\n        return new bignumber_js_1.default(b.toAmount).minus(a.toAmount).toNumber();\n    });\n}\nexports.sortQuotes = sortQuotes;\n//# sourceMappingURL=quotes.js.map"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACttIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}